@import "variables.scss";

// Functions to take color and output the hsla/rgb values to text
@function hsla-str($color) {
    /* Sass outputs the hue value with 'deg' next to it (example 120deg), and we don't want that. */
    $hue: (hue($color) / 1deg);
    /* Sass outputs crazy decimals sometimes, so let's round them. */
    @return unquote("hsl(#{round($hue)}, #{round(saturation($color))}, #{round(lightness($color))})");
  }
  @function rgba-str($color) {
    @return unquote("rgb(#{red($color)}, #{green($color)}, #{blue($color)})");
  }

// Swatches styling
.colors{
  
    // This goes through the colors in our $color map in variables.scss and creates the swatches( bg, hex, rgba, hsla)
    @each $color-name, $color-value in $color {
        $rgbacolor: rgba-str($color-value);
        $hslacolor: hsla-str($color-value);
        &--#{$color-name}{
          .colors__swatch{
            background-color: $color-value;
          }
          .colors__label{
            &:before{
              content: '#{$color-name}\A#{$color-value}\A #{$rgbacolor}\A #{$hslacolor}';
            }
          }
        }
      }
    padding: 2em 0;
    overflow: hidden;
    list-style: none;
    text-align: center;

  &__item{
    display: inline-block;
    vertical-align: middle;
    margin: 0 1em 1em 0;
    @include v(background-color, light);
    padding: 5px;
    border: solid 1px map-get($color, gray-light);
  }

  &__swatch{
    display: block;
    width: 100%;
    min-width:165px;
    height: 0;
    padding-bottom: 100%;
    margin: 0 auto;
    border: 1px solid map-get($color, gray-light);
  }

  &__label{
    display: block;
    @include v(color, primary);
    display: block;
    padding: 5px;
    white-space: pre;
    text-align: left;
  }
}
