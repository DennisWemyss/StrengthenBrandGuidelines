// Variables go here! This is anything that is widely used anywhere in our app.
// Refer to: https://codepen.io/jakealbaugh/post/css4-variables-with-fallbacks-using-sass for explantion
// - on how we take variable maps and double fallback for CSS4 Variables in an easy syntax to use in SASS

@import "https://fonts.googleapis.com/css?family=Lato:300,400,400i,700,700i";

// Color Variables
$color: (
    blue: #007bff,
    indigo: #6610f2,
    purple: #6f42c1,
    pink: #e83e8c,
    red: #dc3545,
    orange: #fd7e14,
    yellow: #ffc107,
    green: #28a745,
    teal: #20c997,
    cyan: #17a2b8,
    white: #ffffff,
    gray-light: #dddddd,
    gray: #6c757d,
    gray-dark: #343a40,
    primary: #505f70,
    secondary: #6c757d,
    success: #28a745,
    info: #479ce1,
    warning: #ffc107,
    danger: #dc3545,
    light: #f8f9fa,
    dark: #343a40
);

// Font Variables
$font: (
  size: (
    body: 1em,
    h1: 2.4em, 
    h2: 2em,
    h3: 1.6em, 
    h4: 1.4em,
  ),
  leading: (
    body: 1.6,
    head: 1.2,
  ),
  family: (
    body: (Lato,sans-serif),
  ),
  weight: (
    light: 300,
    regular: 400,
    bold: 700,
  ),
  style: (
    italic: italic,
    normal: normal
  ),
  line-height: (
    auto: auto,
    short: 1.1,
    normal: 1.3,
    tall: 1.7,
  ),
);


// associate variable map name to an actual variable map
$var-maps: (
  color: $color, 
  font:  $font
);

// which property uses which var map
// you would edit this for each property you want to use variables for
$props: (
  background-color: color,
  color:            color,
  font-family:      (font, family),
  font-size:        (font, size),
  font-weight:      (font, weight),
  line-height:      (font, line-height),
);

// This variable mixin takes a property and variable name
@mixin v($prop, $var, $show-fall: true) {
    // get the property's map name(s)
    $map-name: map-get($props, $prop);
    $nest-name: null;
    $nest-map-name: null;
    $map: null;
    $var-fall: null;
    $var-output: null;
    // if a list, we need to go deeper
    @if type-of($map-name) == list {
      $nest-name: nth($map-name, 1);
      $nest-map-name: nth($map-name, 2);
    }
    // if it is a nested map
    @if $nest-name {
      // get the map from nested map-name
      $map: map-get($var-maps, $nest-name);
      // get the nested map
      $nest-map: map-get($map, $nest-map-name);
      // get the var value fro mthe nested map
      $var-fall: map-get($nest-map, $var);
      $var-output: var(--#{$nest-name}-#{$nest-map-name}-#{$var});    
    } @else {
      // get the map from map name
      $map: map-get($var-maps, $map-name);
      // fallback, grab the variable's value from the map
      $var-fall: map-get($map, $var);
      $var-output: var(--#{$map-name}-#{$var});    
    }
    // if show standard is not overridden to be null
    @if $show-fall {
      #{$prop}: $var-fall;
    }      
    // css4 variable output
    #{$prop}: $var-output;
  }
  
  // setup the css4 variable definitions
  :root {
    // for each variable map
    @each $var-map-name, $var-map in $var-maps {
      // for each variable in the variable map
      @each $var, $val in $var-map {
        // if it is a map, go another level deep
        @if type-of($val) == map {
          // each in the map
          @each $var-n, $val-n in $val {
            // do the definition
                $prop: --#{$var-map-name}-#{$var}-#{$var-n};
                #{$prop}: $val-n;
          }
        } @else {
            // do the definition
            $prop: --#{$var-map-name}-#{$var};
            #{$prop}: $val;
        }
      }
    }
  }
  

  //Example usage of mixin for color & font size
  .your-selector {
    @include v(font-size, body);
    @include v(font-family, body);
    @include v(font-weight, body);
    @include v(line-height, body);
    @include v(background-color, background);
    
    // color it red if no CSS4 variables
    color: red; 
    // override "show standard" with "null" which means no CSS4 support will still be red
    // if we didn't do this, it would create the fallback.
    @include v(color, text, null); 
  }
